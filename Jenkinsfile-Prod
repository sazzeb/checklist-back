pipeline {
    agent {
        node {
            label 'apis'
        }
    }

    environment {
        DOCKER_COMPOSE_FILE = 'compose.yaml'
        DOCKER_COMPOSE_VERSION = '1.29.2'
        PROJECT_NAME = 'checklist'
        ENV_FILE_CREDENTIAL_ID = 'environment-file-for-checklist'
    }

    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    // Ensure Docker Compose is installed at the required version
                    sh "if ! docker-compose --version | grep -q 'docker-compose version ${DOCKER_COMPOSE_VERSION}'; then sudo curl -L \"https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose; fi"

                    // Fetch the .env file from Jenkins credentials and save it in the workspace root
                    withCredentials([file(credentialsId: ENV_FILE_CREDENTIAL_ID, variable: 'ENV_FILE')]) {
                        sh 'cp $ENV_FILE .env'
                    }
                }
            }
        }

        stage('Build and Run Containers') {
            steps {
                // Now, Docker Compose can recognize the .env file at the root of the project
                sh "docker-compose -f ${DOCKER_COMPOSE_FILE} -p ${PROJECT_NAME} up -d --build"
            }
        }

        stage('Check Containers') {
            steps {
                sh "docker-compose -f ${DOCKER_COMPOSE_FILE} -p ${PROJECT_NAME} ps"
            }
        }
    }

    post {
        always {
            sh "docker-compose -f ${DOCKER_COMPOSE_FILE} -p ${PROJECT_NAME} down"
            sh 'rm -f .env' // Clean up the .env file
        }
    }
}
